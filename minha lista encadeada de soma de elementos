#include <stdio.h>
#include <stdlib.h>

struct aluno{
	int numero;
};

struct elemento{
	struct aluno dados;
	struct elemento *prox;	
};

typedef struct elemento* Lista;

typedef struct elemento Elem;

Lista* criarLista(){
	 
	Lista* li = (Lista* )malloc(sizeof(Lista));
	
	if (li != NULL){
		*li = NULL;
	}
	
	return li;
}

void liberarLista(Lista* li){
	
	// lista valida
	if(li != NULL){
		
		Elem* no;
		
		while( (*li) != NULL){
			
			no = *li;
			*li = (*li)->prox;
			free(no);
		}
		free(li);
	}
}

int tamanhoLista(Lista* li){
	
	int tam = 0;

	// lista valida
	if(li == NULL){
		return 0;
	}
		
	Elem* no = *li;
		
	while( no != NULL){
		
		no = no->prox;
		tam++;
	}	
		
	return tam;
}

int listaVazia(Lista* li){
	
	// lista valida
	if(li == NULL){
		return 1;
	}
	
	// sem conteudo
	if(*li == NULL){
		return 1;
	}
	
	return 0;
	
}

int inserirIniciolista(Lista* li, struct aluno alu){

	// lista valida ?
	if(li == NULL){
		return 0;
	}	
	
	Elem *no = (Elem*)malloc(sizeof(Elem));
	
	// tem memoria ?
	if(no == NULL){
		return 0;
	}
	
	no->dados = alu; // recebe os dados
	no->prox = *li; // aponto o novo no para o proximo da lista
	*li = no; // reposiciona o inicio da lista (ponteiro especial)
	
	return 1;
}


int inserirlista(Lista* li, struct aluno alu){

	// lista valida
	if(li == NULL){
		return 0;
	}	
	
	Elem* no = (Elem*)malloc(sizeof(Elem));
	
	if(no == NULL){
		return 0;
	}
	
	no->dados = alu;
	
	// inserir no inicio
	if(listaVazia(li)){
		
		no->prox = (*li);
		*li = no;
		return 1;
		
	}else{
		
		Elem *ant, *atual = *li;
		
		// procurando posicao para inserir
		while(atual != NULL && atual->dados.numero < alu.numero){
			
			ant = atual;
			atual = atual->prox;
		}
		
		// inserir no inicio da lista
		if(atual == *li){
			
			no->prox = (*li);
			*li = no;
			
		}else{
			no->prox = ant->prox;
			ant->prox = no;
		}
		
		return 1;
	}
}

void exibirLista(Lista* li){
	
	int posicao = 1;
		
	if(li == NULL){
		return 0;
	}
	
	Elem *no = *li;
		
	while( no != NULL){
		
		printf("Posicao: %i , elemento: %i \n", posicao, no->dados.numero);
		no = no->prox;
		posicao++;
	}
		
}
int somarlistas(Lista* li,Lista* li2){
	
	int posicao = 1;
	int sol;	
	if(li == NULL){
		return 0;
	}
	
	Elem *no = *li;
	Elem *no2 = *li2;	
	while( no != NULL && no2 != NULL){
	sol=no->dados.numero+no2->dados.numero;
		printf("Posicao: %i , elemento: %i \n", posicao, no->dados.numero);
		no = no->prox;
	posicao++;
		return sol;
}
		}
int main(int argc, char *argv[]) {

	int i,res, tamanho = 0,sol;
	
	struct aluno al1, al2,al3;
	
	Lista *li;// ponteiro para ponteiro
	Lista *li2;
	li = criarLista();
	li2 = criarLista();
	do{
		tamanho = tamanhoLista(li);
	

	printf("Tamanho: %i \n", tamanho);
	
	scanf("%d",&al1.numero); 
	
	res = inserirlista(li, al1);
	
	printf("Resp: %i\ncontinuar?digite 1\nparar digite 0 \n", res);
	scanf("%d",&i);
	}while(i==1);
	exibirLista(li);
	
	do{
		tamanho = tamanhoLista(li2);
	

	printf("Tamanho: %i \n", tamanho);
	
	scanf("%d",&al1.numero); 
	
	res = inserirlista(li2, al1);
	
	printf("Resp: %i\ncontinuar?digite 1\nparar digite 0 \n", res);
	scanf("%d",&i);
	}while(i==1);	
	exibirLista(li2);	
	sol=somarlistas(li,li2);
	printf("%d",sol);
	return 0;
}
